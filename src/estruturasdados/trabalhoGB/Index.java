/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package estruturasdados.trabalhoGB;

import br.unisinos.imagepanel.ImagePanel;
import estruturasdados.trabalhoGB.Domain.QuadTree;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Panel;
import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javafx.stage.FileChooser.ExtensionFilter;
import javax.swing.JFileChooser;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JSlider;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;

/**
 *
 * @author rosted
 */
public class Index extends javax.swing.JFrame {

    /**
     * Creates new form Index
     */
    public Index() {
        initComponents();
        invalidFile = true;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        compressionRateSlider = new javax.swing.JSlider();
        compressionRateLabel = new javax.swing.JLabel();
        selectFileButton = new javax.swing.JButton();
        filePathField = new javax.swing.JTextField();
        compressionRateField = new javax.swing.JTextField();
        proccessImageButton = new javax.swing.JButton();
        panel = new java.awt.Panel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        compressionRateSlider.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                compressionRateSliderStateChanged(evt);
            }
        });
        compressionRateSlider.setPaintTicks(true);
        compressionRateSlider.setPaintLabels(true);
        compressionRateSlider.setMajorTickSpacing(10);
        compressionRateSlider.setMinorTickSpacing(5);

        compressionRateLabel.setText("Taxa de Compress√£o");

        selectFileButton.setText("Selecione o Arquivo");
        filePathField.setText(null);
        selectFileButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                selectFileButtonMouseClicked(evt);
            }
        });

        filePathField.setEditable(false);

        compressionRateField.setEditable(false);

        proccessImageButton.setText("Processar Imagem");
        proccessImageButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                proccessImageButtonMouseClicked(evt);
            }
        });
        proccessImageButton.setEnabled(false);

        javax.swing.GroupLayout panelLayout = new javax.swing.GroupLayout(panel);
        panel.setLayout(panelLayout);
        panelLayout.setHorizontalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        panelLayout.setVerticalGroup(
            panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 144, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(filePathField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(selectFileButton))
            .addComponent(compressionRateSlider, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(compressionRateLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compressionRateField, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(66, 66, 66)
                .addComponent(proccessImageButton)
                .addGap(0, 150, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectFileButton)
                    .addComponent(filePathField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(compressionRateSlider, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(compressionRateLabel)
                    .addComponent(compressionRateField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(proccessImageButton))
                .addGap(19, 19, 19)
                .addComponent(panel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        panel.getAccessibleContext().setAccessibleDescription("");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void selectFileButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_selectFileButtonMouseClicked

        JFileChooser fc = new JFileChooser();
        fc.setCurrentDirectory(new File(System.getProperty("user.dir")));
        FileFilter ff = new FileFilter() {

            @Override
            public boolean accept(File f) {
                return f.getName().endsWith(".ppm") || f.isDirectory();
            }

            @Override
            public String getDescription() {
                return "PPM files (*.ppm)";
            }

        };

        fc.addChoosableFileFilter(ff);
        fc.setFileFilter(ff);

        int returnValue = fc.showOpenDialog((Component) evt.getSource());

        if (returnValue == JFileChooser.APPROVE_OPTION) {
            if (inputFile == null || !fc.getSelectedFile().getAbsolutePath().equals(inputFile.getAbsolutePath())) {
                proccessImageButton.setEnabled(true);

                inputFile = fc.getSelectedFile();
                filePathField.setText(inputFile.getAbsolutePath());

                panel.removeAll();
                panel.repaint();
            }

        }
    }//GEN-LAST:event_selectFileButtonMouseClicked

    private void compressionRateSliderStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_compressionRateSliderStateChanged
        JSlider source = (JSlider) evt.getSource();
        compressionRateField.setText(source.getValue() + " %");
        if (!invalidFile) {
            proccessImageButton.setEnabled(true);
        }
    }//GEN-LAST:event_compressionRateSliderStateChanged

    private void proccessImageButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_proccessImageButtonMouseClicked

        if (!proccessImageButton.isEnabled()) {
            return;
        }

        proccessImageButton.setEnabled(false);

        List<String> lines = null;

        try {
            lines = Files.readAllLines(Paths.get(inputFile.getAbsolutePath()));
        } catch (IOException ex) {
            Logger.getLogger(trabalhoGB.class.getName()).log(Level.SEVERE, null, ex);
        }
        if (!"P3".equals(lines.remove(0).toUpperCase())) {
            JOptionPane.showMessageDialog(this, "Tipo do arquivo incorreto.", "Dialog", JOptionPane.ERROR_MESSAGE);
            invalidFile = true;
            return;
        }

        invalidFile = false;

        String[] size = lines.remove(0).split(" ");
        int width = Integer.valueOf(size[0]);
        int height = Integer.valueOf(size[1]);

        int maxrgb = Integer.valueOf(lines.remove(0));

        int[] pixels = new int[width * height];

        for (int i = 0; i < pixels.length; i++) {
            int r = Integer.valueOf(lines.remove(0));
            int g = Integer.valueOf(lines.remove(0));
            int b = Integer.valueOf(lines.remove(0));

            //0x00FF0000 -> hexadecimal do vermelho
            //0x0000FF00 -> hexadecimal do verde
            //0x000000FF -> hexadecimal do azul
            r = (r << 16) & 0x00FF0000;
            g = (g << 8) & 0x0000FF00;
            b = b & 0x000000FF;

            pixels[i] = 0xFF000000 | r | g | b;
        }

        imagePanel = new ImagePanel();
        imagePanel.update(pixels, width, height);
        panel.add(imagePanel);
        setSize(Math.max(getWidth(), width * 2), Math.max(getHeight(), height * 2));
        setPreferredSize(getSize());
        setMinimumSize(getSize());
        panel.setVisible(true);
        panel.repaint();
        
        pack();

        QuadTree tree = new QuadTree(pixels, width, height);

    }//GEN-LAST:event_proccessImageButtonMouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Index.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Index().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField compressionRateField;
    private javax.swing.JLabel compressionRateLabel;
    private javax.swing.JSlider compressionRateSlider;
    private javax.swing.JTextField filePathField;
    private java.awt.Panel panel;
    private javax.swing.JButton proccessImageButton;
    private javax.swing.JButton selectFileButton;
    // End of variables declaration//GEN-END:variables
    private File inputFile;
    private boolean invalidFile;
    private ImagePanel imagePanel;
}
